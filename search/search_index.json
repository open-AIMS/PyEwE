{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyEwE","text":"<p>Welcome to <code>PyEwE</code>! This tool utilizes Ecopath with Ecosim to explore a wide range of contaminant release and modelling scenarios.</p> <p>This documentation provides guidance on setup, usage, and development.</p> <p>Supports Ecopath with Ecosim v6.7.</p>"},{"location":"#setup","title":"Setup","text":"<ol> <li> <p>Download Ecopath with Ecosim:     Obtain Ecopath with Ecosim v6.7 and note the installation path (the directory containing <code>EwECore.dll</code>).</p> </li> <li> <p>Install Python Environment Manager:     We recommend uv for managing Python versions and dependencies. Install it if you haven't already. Restart your terminal after installation.</p> </li> <li> <p>Install Project Dependencies:     Navigate to the <code>PyEwE</code> project directory in your terminal and run:     <pre><code>uv sync\n</code></pre>     This command installs all necessary Python packages specified in the project configuration.</p> </li> <li> <p>Set Environment Variable:     Add an environment variable <code>EWE_BIN_PATH</code> that points to the directory containing the EwE binaries (e.g., where <code>EwECore.dll</code> is located).</p> <p>Powershell (Windows): <pre><code>$env:EWE_BIN_PATH=\"C:\\Path\\To\\Your\\EwE\\Binaries\"\n</code></pre> To make this permanent, you can add it to your PowerShell profile or set it through the System Properties dialog.</p> <p>bash (Linux/macOS): <pre><code>export EWE_BIN_PATH=\"/path/to/your/ewe/binaries\"\n</code></pre> To make this permanent, add the <code>export</code> command to your shell's configuration file (e.g., <code>~/.bashrc</code>, <code>~/.zshrc</code>).</p> <p>The library will attempt to automatically initialize with this path. If this variable is not set, or you need to use a different path at runtime, you can call the <code>initialise()</code> function manually in your Python script.</p> </li> </ol>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>See High Level Interface for a guide on how to use the library with examples.</li> <li>See Medium Level Interface for a guide on how to use the library with more control over initialisation and parameter setting.</li> <li>Explore the API Reference for detailed information on classes and functions.</li> <li>For developers, the Development Notes provide insights into the library's internals and setup for contribution.</li> </ul>"},{"location":"development/","title":"Development Notes","text":"<p>When implementing getters and setters for parameters that are arrays, there is often inconsistencies where EwE indexes the array as one based or zero-based. In fact, due to the way arrays are declared in Visual Basic, there is often an unused element at the beginning or end of arrays. This is notable in the shape forcing functions where one may define a forcing function by a list of values, and then view it in the GUI, the first element is missing as EwE treats it as an a one based array. Similar, problems occur for output variables when they are <code>memmoved</code> from dot net to python, where the first or last slice of each dimension is completely unused.</p> <p>Decisions should be made to replicate what would be expected if parameters were set via the GUI.</p>"},{"location":"development/#ecotracer-concentration-and-concentration-biomass-outputs","title":"Ecotracer Concentration and Concentration Biomass outputs","text":"<p>Visual Basic defines arrays as follows</p> <pre><code>Dim var(n, m) as integer\n</code></pre> <p>This constructs an array os shape <code>(n + 1, m + 1)</code>. Visual basic array declaration defines the largest index possible, not the size of the dimension.</p>"},{"location":"development/#ecotracer-forcing","title":"Ecotracer Forcing","text":""},{"location":"development/#environmental-inflow-forcing","title":"Environmental Inflow Forcing","text":"<p>The Environmental inflow forcing function as seen at the top of the Ecotracer inputs page can be loaded by defining a forcing function or csv.</p> <p>The forcing shape manager indexs forcing shapes using a zero based index, whilst the index stored in the shape objects is one based.</p> <p>Before the forcing values are added to the core, the value 1.0 is added as padding to the beginning of the vector as EwE treats the forcing function shape as a one-based index.</p>"},{"location":"development/#contaminent-concentration-driver-file","title":"Contaminent concentration driver file","text":"<p>Contaminant concentration driver file refers to the spatial temporal frame work with ecospace.</p>"},{"location":"high_level_interface/","title":"High Level Interface","text":"<p>EwE-py provides a high level interface where users can execute a large number of scenarios runs and execute in parallel. EwE-py exports this functionality through the <code>EwEScenarioInterface</code> class.</p>"},{"location":"high_level_interface/#usage","title":"Usage","text":"<p>Before preceeding see the Setup Instructions for how to install requirements and link the EwE binaries.</p>"},{"location":"high_level_interface/#initialisation","title":"Initialisation","text":"<pre><code>from pyewe import EwEScenarioInterface \n\nmodel_path = \"&lt;Path to Model Database&gt;\"\n\newe_int = EwEScenarioInterface(model_path)\n</code></pre>"},{"location":"high_level_interface/#setting-up-ecosim","title":"Setting up Ecosim","text":"<p>EwE-py does not currently support changing ecosim parameters between scenario runs. Ecosim scenario parameters can be set via two methods. Using the same csv formats as the EwE GUI exports, dataframes can be passed to the scenario interface</p> <pre><code>vulnerabilities = pd.read_csv(\"Path to Vulnerabilities\")\necosim_group_info = pd.read_csv(\"Path to Ecosim Group Info\")\n\newe_int.set_ecosim_group_info(ecosim_group_info)\newe_int.set_ecosim_vulnerabilities(vulnerabilities)\n</code></pre> <p>The EwE GUI can also be used. Simply edit an ecosim scenario with the EwE GUI and pass the name of the ecosim scenario during the initialisation of the interface object.</p> <p><pre><code>ewe_int = EwEScenarioInterface(model_path, \"name of ecosim scenario\")\n</code></pre> The name of the ecosim scenario must be unique.</p>"},{"location":"high_level_interface/#setting-up-ecotracer-scenarios","title":"Setting up Ecotracer Scenarios","text":"<p>Before preceeding see Parameter Management for  naming conventions.</p>"},{"location":"high_level_interface/#constants","title":"Constants","text":"<p>EwE-py will set the constant parameters prior to scenario runs and not change them.</p> <pre><code>param_names = [\"list of param names\"]\nparam_values = [list, of, param, values]\n\newe_int.set_constant_params(param_names, param_values)\n</code></pre>"},{"location":"high_level_interface/#running-scenarios","title":"Running Scenarios","text":"<p>Parameters that are varied during execution must be passed to the <code>run_scenarios</code> or <code>run_scenarios_parallel</code> function as the columns of a dataframe.</p> <pre><code>varied_param_names = [\"list of parameter names\"]\n\n\nscenario_dataframe = ...\n\n# The Scenario DataFrame must have the following column names\nassert scenario_dataframe.columns[0] = \"Scenario\"\nassert scenario_dataframe.columns[1:] = varied_param_names\n</code></pre> <p>Then scenario runs can be executed as follows,</p> <p><pre><code>results = ewe_int.run_scenarios(\n    scenario_dataframe, \n    save_vars=[\"Concentration\", \"Biomass\", ...],\n    show_progress=True\n)\n\n# Or with parallel processing\nresults = ewe_int.run_scenarios_parallel(\n    scenario_dataframe, \n    n_workers=22,\n    save_vars=[\"Concentration\", \"Biomass\", ...],\n    show_progress=True\n)\n\nresults.save_results(\"path to save dir\", formats=[\"netcdf\"])\n</code></pre> See the Results Section for more information on interacting with results.</p>"},{"location":"high_level_interface/#api","title":"API","text":"<p>See API for a complete documentation for class fields and methods.</p>"},{"location":"medium_level_interface/","title":"Medium Level Interface","text":"<p>EwE-py wraps the underlying core library to allow the a tighter control of the core EwE object. This wrapper more closely follows the object structures defined in the underlying EwE libraries with some slight restructuring for added convenience. The class is called <code>CoreInterface</code> and contains <code>Ecosim</code> and <code>Ecotracer</code> State Managers to control the current parameterisation of the model. This object is useful when being have to setup parallelisation scripts or more custom computations.</p> <p>Using this interface will potentially alter the underlying database.</p>"},{"location":"medium_level_interface/#initilisation","title":"Initilisation","text":"<p>The core object does not accept a model path as a constructor input and instead initialisation generic instance that can load any model. However, a model should be loaded to access the functionality of the model.</p> <pre><code>from ewe_py import CoreInterface\ncore = CoreInterface()\n\ncore.load_model(\"path to model database\")\n</code></pre>"},{"location":"medium_level_interface/#loading-scenarios","title":"Loading scenarios","text":"<p>Scenario can be added, loaded and deleted using the model state managers.</p> <pre><code>core.Ecosim.new_scenario(\"name\", \"description\", \"author\", \"contact\")\ncore.Ecosim.remove_scenario(\"&lt;Name or index of scenario&gt;\")\ncore.Ecosim.load_scenario(\"&lt;Name or index of scenario&gt;\")\ncore.Ecosim.save_scenario()\ncore.Ecosim.save_scenario_as()\n\n# Save scenario as and description are broken for ecotracer.\ncore.Ecotracer.new_scenario(\"name\", \"description\", \"author\", \"contact\")\n...\n</code></pre>"},{"location":"medium_level_interface/#parameter-setting","title":"Parameter Setting","text":"<p>Setters and getters for parameter are generated for the state managers. For functional group parameters, you set the parameterisation by passing the index of the groups you want to set and the value of the groups.</p> <pre><code>core.Ecotracer.set_initial_concentrations([list, of, values], [index, of, groups])\ncore.Ecotracer.get_initial_concentrations()\n</code></pre> <p>To do: List all possible getters and setters.</p>"},{"location":"medium_level_interface/#parameter-management","title":"Parameter Management","text":"<p>Parameter setting for Ecotracer is much easier to do using the Parameter Manager. Following the naming conventions as documented in the Parameter Management Section, users can setup a parameter manager as follows.</p> <pre><code>from ewe_py import ParameterManager\nmanager = EcotracerManager(core)\n\n# Define which params will stay constant\nmanager.set_constant_params([\"list of names\"], [list, of, values])\n# Write constant params to core object.\nmanager.apply_constant_params()\n\n# The set variable params accepts indexes into a future list of parameters\nmanager.set_variable_params([\"list of names\"], [list, of, indexes])\n\n# changing params in the future.\nmanager.apply_variable_params([list, of, values])\n</code></pre>"},{"location":"parameter_management/","title":"Parameter Management","text":"<p>Currently, the parameter management object only supports Ecotracer. However, can be extended by defining an Ecosim factory method similar to the Ecotracer implementation. The parameter managers using the naming of parameters passed to the managers to decide which setter functions to call and for which functional group it shoould be set.</p>"},{"location":"parameter_management/#parameter-naming","title":"Parameter Naming","text":"<p>Ecotracer parameters are split into two groups, environmental parameters and group parameters. EwE-py using different naming conventions for each with environmantal parameters being much simpler.</p>"},{"location":"parameter_management/#environmental-parameters","title":"Environmental Parameters","text":"<p>Environmantal Parameters are named as follows,</p> <ul> <li><code>env_init_c</code>: Initial environmental contaminant concentration.</li> <li><code>env_base_inflow_r</code>: Base contaminant infrow rate.</li> <li><code>env_decay_r</code>: Environmental contaminant decay rate.</li> <li><code>base_vol_ex_loss</code>: Base environmental volume exchange loss.</li> <li><code>env_inflow_forcing_idx</code>: Index of the inflow forcing function to use.</li> </ul>"},{"location":"parameter_management/#group-ecotracer-parameters","title":"Group Ecotracer Parameters","text":"<p>There are six types of ecotracer group parameters with the following prefixes,</p> <ul> <li><code>init_c</code>: Group initial contaminant concentration.</li> <li><code>immig_c</code>: Group immigration contaminant concentration</li> <li><code>direct_abs_r</code>: Group direct absorption rate.</li> <li><code>phys_decay_rate</code>: Physical decay rate.</li> <li><code>meta_decay_r</code>: Metabolic decay rate.</li> <li><code>excretion_r</code>: Excretion rate.</li> </ul> <p>Then the full name of a ecotracer is structered as follows,</p> <p><code>&lt;prefix&gt;_&lt;group_index&gt;_&lt;group_name&gt;</code>.</p> <p>For example, if <code>Baleen Whale</code> is the first functional group in the model and there is between 10 and 99 functional groups, then the parameter for the Baleen Whale's initial  contaminant concentration would be <code>init_c_01_Baleen Whale</code>.</p>"},{"location":"parameter_management/#management","title":"Management","text":"<p>The Ecotracer Parameter manager provides a simpler way to set parameter other then using the getter and setters in the Ecotracer object. The manager provides two ways to set parameters within the core. Constant parameters need to be set with the name of the parameter and the values, whilst variable parameters accept names of parameters and indices of parameter values into any future list that may be passed. The idea being that strings don't need to parsed everytime parameters are set.</p>"},{"location":"parameter_management/#initialisation","title":"Initialisation","text":"<pre><code>core = CoreInterface()\n# A model must be loaded before the parameter manager is initialised.\ncore.load_model(\"path/to/model/database\")\n\nparameter_manager = EcotracerManager(core)\n</code></pre>"},{"location":"parameter_management/#setting-parameters","title":"Setting Parameters","text":"<pre><code>const_param_names = [\"name\", \"of\", \"params\"]\nconst_param_values = [value, of, params]\n# Configure the constant params within the parameter manager.\nparameter_manager.set_constant_params(const_param_names, cosnt_param_values)\n# Write the parameter into the core model.\nparameter_manager.apply_constant_params(core)\n</code></pre> <p>Variable parameters are intended for parameters that will changed frequently. Consider the situation where the parameter for different scenario are contained in a data frame, where the columns are the data frame.</p> <pre><code>import pandas as pd\n# Params has columns [\"scenario\", \"param_1\", \"param_2\", ...]\nparams = pd.read_csv(\"scenario_params.csv\")\n\n# Remove scenario columns\nparam_names = list(params.columns)[1:]\nparam_idxs = list(range(len(param_names)))\nparameter_manager.set_variable_params(param_names, param_idxs)\n\nfor (i, row) in params.iterrows():\n    # Set parameters without processing strings in each iteration.\n    parameter_manager.apply_variable_params(core, list(row[1:]))\n    # Run model ...\n    # Collect results ...\n</code></pre>"},{"location":"api/reference/","title":"API Reference","text":"<p>This section provides a detailed reference for the main classes and functions in the <code>pyewe</code> library.</p>"},{"location":"api/reference/#pyewe.EwEScenarioInterface","title":"<code>EwEScenarioInterface(model_path, temp_model_path=None, ecosim_scenario=None)</code>","text":"<p>Interface for running Ecopath with Ecosim scenarios.</p> <p>Attributes:</p> Name Type Description <code>_model_path</code> <code>str</code> <p>Path to EwE model database file.</p> <code>_temp_model_path</code> <code>str</code> <p>Path to temporary model database file.</p> <code>_param_manager</code> <code>ParameterManager</code> <p>Parameter manager object to manage variable and constant params.</p> <p>Initialise a EwEScenarioInterface</p> <p>Given a path to the EwE model database, construct a EwEScenarioInterface object by copying the database to a temporar location so that the given database is not edited. When the interface is cleaned up or the python program exits, the object will close the temporary database and delete the temporary folder it was placed in.</p> <p>If the user supplies a temporary model path, then the model will copied to that location. Ther user is responsible for deleting the copied database when complete however. This is mainly for debugging purposes to check the underlying state.</p> <p>'EwEScenarioInterface.cleanup()' is registered at exit but it also good practice to manually call this function after completion.</p> <p>Parameters:</p> Name Type Description Default <code>model_path</code> <code>str</code> <p>Path to model database.</p> required <code>temp_model_path</code> <code>Optonal[str]</code> <p>Path to where the model database should be copied, the user is responsible for cleaning up the copy.</p> <code>None</code>"},{"location":"api/reference/#pyewe.EwEScenarioInterface.add_forcing_function","title":"<code>add_forcing_function(name, values)</code>","text":"<p>Add/Register forcing function for use in scenario runs.</p>"},{"location":"api/reference/#pyewe.EwEScenarioInterface.cleanup","title":"<code>cleanup()</code>","text":"<p>Clean up files and directoryies created by the interface.</p> <p>Close the model database and delete the temporary directory containing the model.</p>"},{"location":"api/reference/#pyewe.EwEScenarioInterface.get_ecotracer_fg_param_names","title":"<code>get_ecotracer_fg_param_names(param_names='all')</code>","text":"<p>Get functional group parameter names for given parameter prefixes</p>"},{"location":"api/reference/#pyewe.EwEScenarioInterface.get_empty_scenarios_df","title":"<code>get_empty_scenarios_df(env_param_names, fg_param_names, n_scenarios=1)</code>","text":"<p>Create empty scenarios dataframe for specified parameters.</p> <p>Parameters:</p> Name Type Description Default <code>env_param_names</code> <code>list[str]</code> <p>List of environmental parameter names.</p> required <code>fg_param_names</code> <code>list[str]</code> <p>List of functional group parameter names, (not combined parameter names and functional group names.)</p> required <code>n_scenarios</code> <code>int</code> <p>Number of scenarios to create a dataframe for.</p> <code>1</code>"},{"location":"api/reference/#pyewe.EwEScenarioInterface.get_long_scen_dataframe","title":"<code>get_long_scen_dataframe()</code>","text":"<p>Get the full scenario dataframe in a long format.</p> <p>Construct a scenario dataframe in a long format. Given four columns, 'Scenario', 'Group', 'Parameter', and 'Value'.</p>"},{"location":"api/reference/#pyewe.EwEScenarioInterface.reset_parameters","title":"<code>reset_parameters()</code>","text":"<p>Remove all saved constant and variable parameters names and values.</p>"},{"location":"api/reference/#pyewe.EwEScenarioInterface.run_scenarios","title":"<code>run_scenarios(scenarios, save_vars=['Concentration', 'Concentration Biomass', 'Biomass', 'Catch', 'Consumption Biomass', 'Mortality', 'Trophic Level', 'Trophic Level Catch', 'FIB', 'KemptonsQ', 'Shannon Diversity'], show_progress=True, verbose=True)</code>","text":"<p>Run scenarios in given dataframe.</p> <p>Run all scenarios in the given dataframe and save results in the given formats to the given directory.</p> <p>Parameters:</p> Name Type Description Default <code>scenarios</code> <code>DataFrame</code> <p>Scenario dataframe listing parameter values for each scenario.</p> required <p>Returns:</p> Name Type Description <code>results</code> <code>ResultSet</code> <p>Containing results</p>"},{"location":"api/reference/#pyewe.EwEScenarioInterface.run_scenarios_parallel","title":"<code>run_scenarios_parallel(scenarios, n_workers=None, save_vars=['Concentration', 'Concentration Biomass', 'Biomass', 'Catch', 'Consumption Biomass', 'Mortality', 'Trophic Level', 'Trophic Level Catch', 'FIB', 'KemptonsQ', 'Shannon Diversity'], show_progress=True)</code>","text":"<p>Run scenarios in parallel.</p> <p>Parameters:</p> Name Type Description Default <code>scenarios</code> <code>DataFrame</code> <p>Dataframe containing parameters for each scenario.</p> required <code>n_workers</code> <code>Optional[int]</code> <p>Number of processes to run in parallel</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ResultSet</code> <p>results from scenario runs.</p>"},{"location":"api/reference/#pyewe.EwEScenarioInterface.set_constant_params","title":"<code>set_constant_params(param_names, param_values)</code>","text":"<p>Set parameters that are constant across scenarios</p>"},{"location":"api/reference/#pyewe.EwEScenarioInterface.set_ecosim_group_info","title":"<code>set_ecosim_group_info(group_info)</code>","text":"<p>Set Ecosim group information parameters.</p> <p>Set the parameterisation for ecosim group information (feeding parameters). The data frame should be in the same format with the same column names as the table in the EwE GUI.</p>"},{"location":"api/reference/#pyewe.EwEScenarioInterface.set_ecosim_vulnerabilities","title":"<code>set_ecosim_vulnerabilities(vulnerabilities)</code>","text":"<p>Set Ecosim vulnerabilities to use for all scenario runs.</p> <p>Set the vulnerabilitiy coefficient used in the Ecosim model. The format for the input dataframe should be the same format as seen in the EwE GUI.</p>"},{"location":"api/reference/#pyewe.EwEScenarioInterface.set_simulation_duration","title":"<code>set_simulation_duration(n_years)</code>","text":"<p>Set the number of years to run ecosim for.</p>"},{"location":"api/reference/#pyewe.results.ResultSet","title":"<code>ResultSet(py_core, scenarios, results)</code>","text":"<p>Contains results after scenario runs.</p> <p>This class is the user facing store of results. It should not contain references to the core object, and should contains all output results and scenario being run.</p> <p>Attributes:</p> Name Type Description <code>scenarios</code> <code>dict</code> <p>Dataframe containing scenario specification for results.</p> <code>results</code> <code>dict</code> <p>Dictionary mapping result variable names to xarrays.</p> <code>country</code> <code>str</code> <p>Name of country that the EwE model is based in.</p> <code>first_year</code> <code>int</code> <p>First Year ecosim is run.</p> <code>n_scenarios</code> <code>int</code> <p>Number of scenarios run.</p> <code>n_varied</code> <code>params (int</code> <p>Number of parameters changed between scenarios.</p>"},{"location":"api/reference/#pyewe.results.ResultSet.save_results","title":"<code>save_results(save_dir, formats)</code>","text":"<p>Write results to all formats given.</p> <p>Only NetCDF4, \"netcdf\", and CSV, \"csv\", are currently supported.</p> <p>Parameters:</p> Name Type Description Default <code>formats list[str]</code> <p>list of formats to save results in.</p> required"},{"location":"api/reference/#pyewe.core.interface.CoreInterface","title":"<code>CoreInterface()</code>","text":"<p>Interface to update the state of the underlying EwECore.</p> <p>CoreInterface provides a thin wrapper over the original cCore object defined in the EwE binaries. It should provide convenience functions to carry out operations already defined in the cCore object. Larger scale manipulations should not occur in this class.</p> <p>Attributes:</p> Name Type Description <code>_core</code> <code>cCore</code> <p>Visual Basic cCore object describing the state of the program.</p> <code>_ecopath_result_writer</code> <code>cEcopathResultWriter</code> <p>Object the handles writing ecopath results</p> <code>_ecosim_result_writer</code> <code>cEcosimResultWriter</code> <p>Object the handles writing ecosim results</p> <code>_ecotracer_result_writer</code> <code>cEcotracerResultWriter</code> <p>Object the handles writing ecotracer results</p> <code>_state</code> <code>cStateMonitor</code> <p>Object handling high level state information bout _core</p> <code>Ecosim</code> <code>EcosimStateManager</code> <p>object that manages scenario loading, model runs and results for Ecosim</p> <code>Ecotracer</code> <code>EcotracerStateManager</code> <p>object that manages scenario loading, model runs and results for Ecotracer</p>"},{"location":"api/reference/#pyewe.core.interface.CoreInterface.add_forcing_function","title":"<code>add_forcing_function(name, values)</code>","text":"<p>Add a forcing function to the core instance.</p> <p>Add a forcing function to the forcing function manager given a list of values and a name. Furthermore, this function prepends a value of 1.0 to the list as EwE begins indexing the first value at 1.0 even though the underlying array is a 0 indexed array. See the deveolpment notes in the documentation for more information.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the forcing function.</p> required <code>values</code> <code>list[str]</code> <p>List of values for the forcing function.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Index of the forcing function in the forcing manager.</p>"},{"location":"api/reference/#pyewe.core.interface.CoreInterface.get_country","title":"<code>get_country()</code>","text":"<p>Get the country that the model is based on.</p>"},{"location":"api/reference/#pyewe.core.interface.CoreInterface.get_first_year","title":"<code>get_first_year()</code>","text":"<p>Get the first year for which ecosim is run.</p>"},{"location":"api/reference/#pyewe.core.interface.CoreInterface.get_functional_group_index","title":"<code>get_functional_group_index(group)</code>","text":"<p>Get the index of a given functional gruop in the ecopath model.</p>"},{"location":"api/reference/#pyewe.core.interface.CoreInterface.get_functional_group_indices","title":"<code>get_functional_group_indices(groups)</code>","text":"<p>Get the indices of the functional groups in the ecopath model.</p> <p>Get the indices of the functional groups in the ecopath model. This is a one-based index.</p>"},{"location":"api/reference/#pyewe.core.interface.CoreInterface.get_functional_group_names","title":"<code>get_functional_group_names()</code>","text":"<p>Get the name of all functional groups in the EwE model.</p>"},{"location":"api/reference/#pyewe.core.interface.CoreInterface.load_model","title":"<code>load_model(path)</code>","text":"<p>Load model from a EwE access database file into the EwE core.</p>"},{"location":"api/reference/#pyewe.core.interface.CoreInterface.n_consumers","title":"<code>n_consumers()</code>","text":"<p>Get the number of consumers in the loaded model.</p>"},{"location":"api/reference/#pyewe.core.interface.CoreInterface.n_detritus_groups","title":"<code>n_detritus_groups()</code>","text":"<p>Get the number of detritus groups in the loaded model.</p>"},{"location":"api/reference/#pyewe.core.interface.CoreInterface.n_groups","title":"<code>n_groups()</code>","text":"<p>Get the number of functional groups in the loaded model.</p>"},{"location":"api/reference/#pyewe.core.interface.CoreInterface.n_living_groups","title":"<code>n_living_groups()</code>","text":"<p>Get the number of living groups in the loaded models.</p>"},{"location":"api/reference/#pyewe.core.interface.CoreInterface.n_producers","title":"<code>n_producers()</code>","text":"<p>Get the number of producers in the loaded model</p>"},{"location":"api/reference/#pyewe.core.interface.CoreInterface.print_summary","title":"<code>print_summary()</code>","text":"<p>Print summary on the state of the EwE core.</p>"},{"location":"api/reference/#pyewe.core.interface.CoreInterface.save_all_ecosim_results","title":"<code>save_all_ecosim_results(dir)</code>","text":"<p>Save all ecosim result variables to the given directory.</p>"},{"location":"api/reference/#pyewe.core.interface.CoreInterface.save_ecosim_results","title":"<code>save_ecosim_results(dir, result_types, monthly=True, quiet=True)</code>","text":"<p>Save ecosim results for a given setup of result variables.</p> <p>Parameters:</p> Name Type Description Default <code>dir</code> <code>str</code> <p>Directory to save csv files to.</p> required <code>result_types</code> <code>str</code> <p>Names of variables to save.</p> required <code>monthly</code> <code>bool</code> <p>flag to save monthly or yearly values.</p> <code>True</code> <code>quiet</code> <code>bool</code> <p>flag to print information.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful</p>"},{"location":"api/reference/#pyewe.core.interface.CoreInterface.save_ecotracer_results","title":"<code>save_ecotracer_results(filepath)</code>","text":"<p>Save ecotracer results to a given file</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Path to save file</p> required <p>Returns:</p> Type Description <code>None</code> <p>successful save</p>"},{"location":"api/reference/#pyewe.core.interface.CoreInterface.set_default_save_dir","title":"<code>set_default_save_dir(save_dir)</code>","text":"<p>Set the default save directory in underlying core object.</p>"},{"location":"api/reference/#pyewe.core.models.EcosimStateManager","title":"<code>EcosimStateManager(core, state)</code>","text":"<p>               Bases: <code>EwEScenarioModel</code>, <code>EwEParameterManager</code></p> <p>Ecosim Model State Wrapper</p> <p>This should be the interface at which Ecosim information is set and retrieved. Parameter setting, results extraction and scenario loading should be controlled via this class.</p>"},{"location":"api/reference/#pyewe.core.models.EcosimStateManager.new_scenario","title":"<code>new_scenario(name, description, author, contact)</code>","text":"<p>Create a new Ecosim scenario.</p>"},{"location":"api/reference/#pyewe.core.models.EcosimStateManager.run","title":"<code>run()</code>","text":"<p>Run the ecosim model without ecotracer and return whether it was successful.</p>"},{"location":"api/reference/#pyewe.core.models.EcosimStateManager.save_scenario","title":"<code>save_scenario()</code>","text":"<p>Save the current state of the ecosim scenario to the underlying database.</p>"},{"location":"api/reference/#pyewe.core.models.EcosimStateManager.save_scenario_as","title":"<code>save_scenario_as(name, description)</code>","text":"<p>Save the current state of the ecosim scenario to a new scenario.</p>"},{"location":"api/reference/#pyewe.core.models.EcosimStateManager.set_vulnerabilities","title":"<code>set_vulnerabilities(vulnerabilities)</code>","text":"<p>Set ecosim vulnerabilites from a vulnerability matrix.</p>"},{"location":"api/reference/#pyewe.core.models.EcotracerStateManager","title":"<code>EcotracerStateManager(core, state)</code>","text":"<p>               Bases: <code>EwEScenarioModel</code>, <code>EwEParameterManager</code></p> <p>Ecotracer Model State Wrapper</p> <p>This should be the interface at which Ecotracer information is set and retrieved. Parameter setting, results extraction, scenario loading and ecotracer execution should be controlled via this class.</p>"},{"location":"api/reference/#pyewe.core.models.EcotracerStateManager.get_contaminant_forcing_number","title":"<code>get_contaminant_forcing_number()</code>","text":"<p>Get the index of the Contaminant forcing function.</p> <p>Get the index of the contaminant forcing function in the core contaminant forcing function manager. A return a one based index.</p>"},{"location":"api/reference/#pyewe.core.models.EcotracerStateManager.new_scenario","title":"<code>new_scenario(name, description, author, contact)</code>","text":"<p>Create a new EcoTracer scenario.</p>"},{"location":"api/reference/#pyewe.core.models.EcotracerStateManager.run","title":"<code>run()</code>","text":"<p>Run the ecosim model with ecotracer and return whether it was successful</p>"},{"location":"api/reference/#pyewe.core.models.EcotracerStateManager.save_scenario","title":"<code>save_scenario()</code>","text":"<p>Save the state of the ecotracer scenario to the underlying database.</p>"},{"location":"api/reference/#pyewe.core.models.EcotracerStateManager.save_scenario_as","title":"<code>save_scenario_as(name, description)</code>","text":"<p>Save the state of the ecotracer scenario to the underlying database.</p>"},{"location":"api/reference/#pyewe.core.models.EcotracerStateManager.set_contaminant_forcing_number","title":"<code>set_contaminant_forcing_number(forcing_index)</code>","text":"<p>Set the index of the contaminant forcing function.</p> <p>Raises:</p> Type Description <code>EwEError</code> <p>No forcing function with index: {forcing_index} contained in core.</p>"},{"location":"api/results/","title":"Results Handling","text":"<p>This section describes how results are managed and can be accessed or saved. The primary way to interact with results is through the <code>ResultSet</code> object returned by <code>EwEScenarioInterface.run_scenarios()</code> or <code>run_scenarios_parallel()</code>.</p>"},{"location":"api/results/#resultset-object","title":"<code>ResultSet</code> Object","text":"<p>The <code>ResultSet</code> object (class <code>pyewe.results.ResultSet</code>) holds all the outputs from your scenario runs. You can access individual variables as <code>xarray.DataArray</code> objects.</p> <pre><code># Assuming 'results' is a ResultSet object from ewe_int.run_scenarios(scen_df)\n\n# Access Biomass results\nbiomass_data = results[\"Biomass\"]\n\n# Access Concentration results\nconcentration_data = results[\"Concentration\"]\n\n# 'biomass_data' and 'concentration_data' are xarray.DataArrays\n# You can use xarray's powerful indexing and computation features\n# For example, get biomass for the first scenario, first group, all time steps:\n# specific_biomass = biomass_data.sel(Scenario=0, Group='NameOfFirstGroup')\n</code></pre>"}]}